(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{268:function(e,t,s){"use strict";s.r(t);var a=s(38),i=Object(a.a)({},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"quickstart"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#quickstart","aria-hidden":"true"}},[e._v("#")]),e._v(" Quickstart")]),e._v(" "),s("p",[e._v("In this guide we will take you through setting up your Oasis dev environment, testing a simple Rust service using cargo, testing the same service using a locally running blockchain, and finally testing it using our Devnet 2.0.")]),e._v(" "),s("h2",{attrs:{id:"set-up-the-oasis-sdk"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#set-up-the-oasis-sdk","aria-hidden":"true"}},[e._v("#")]),e._v(" Set Up the Oasis SDK")]),e._v(" "),s("h3",{attrs:{id:"prerequisites"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#prerequisites","aria-hidden":"true"}},[e._v("#")]),e._v(" Prerequisites")]),e._v(" "),s("p",[e._v("To run the local Oasis blockchain ("),s("code",[e._v("oasis-chain")]),e._v("), you will need a C compiler like"),s("code",[e._v("clang")]),e._v(" or "),s("code",[e._v("gcc")]),e._v(".\nIf you're reading these docs, you probably already have one, but if you don't, you can run one of")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("xcode-select --install")])]),e._v(" "),s("li",[s("code",[e._v("sudo apt-get install build-essential")])]),e._v(" "),s("li",[s("code",[e._v('sudo yum groupinstall "Development Tools" "Development Libraries"')])])]),e._v(" "),s("h3",{attrs:{id:"installing-the-oasis-toolchain"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#installing-the-oasis-toolchain","aria-hidden":"true"}},[e._v("#")]),e._v(" Installing the Oasis toolchain")]),e._v(" "),s("ol",[s("li",[s("a",{attrs:{href:"https://rustup.rs",target:"_blank",rel:"noopener noreferrer"}},[e._v("Install Rust using rustup"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("code",[e._v("rustup default nightly-2019-07-25")])]),e._v(" "),s("li",[s("code",[e._v("rustup target add wasm32-wasi")])]),e._v(" "),s("li",[s("code",[e._v("cargo install oasis-cli oasis-build oasis-chain")])]),e._v(" "),s("li",[e._v("Ensure that the "),s("code",[e._v("$HOME/.cargo/bin")]),e._v(" is in your "),s("code",[e._v("$PATH")])])]),e._v(" "),s("p",[e._v("Note: If you change your Rust toolchain to another nightly, you'll need to "),s("code",[e._v("cargo install --force oasis-build")]),e._v(".\nWe're working on automating this!")]),e._v(" "),s("h2",{attrs:{id:"unit-test-the-hello-world-service-using-cargo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#unit-test-the-hello-world-service-using-cargo","aria-hidden":"true"}},[e._v("#")]),e._v(' Unit Test the "Hello World" Service Using Cargo')]),e._v(" "),s("ol",[s("li",[s("code",[e._v("git clone https://github.com/oasislabs/tutorials")])]),e._v(" "),s("li",[s("code",[e._v("cd oasis-tutorials/hello-world/service")])]),e._v(" "),s("li",[s("code",[e._v("oasis test -- --nocapture")])])]),e._v(" "),s("p",[e._v("The test will do the following:")]),e._v(" "),s("ol",[s("li",[e._v("Retrieve Hello World! in Slovenian")]),e._v(" "),s("li",[e._v("Attempt to retrieve Hello World! in Samoan, but fail because it doesn't exist")]),e._v(" "),s("li",[e._v("Attempt to insert a duplicate greeting (this will fail)")]),e._v(" "),s("li",[e._v("Insert Hello World! in Samoan")]),e._v(" "),s("li",[e._v("Retrieve Hello World! successfully in Samoan")])]),e._v(" "),s("p",[e._v("You should see the following console output:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('running 1 test\nIn Slovenian: "Pozdravljen, svet!"\nIn Samoan: None\nAdding "Zeno World!" for "en"\nErr(DuplicateEntry)\nAdding "alofa fiafia i le lalolagi!" for "ws"\nIn Samoan: "alofa fiafia i le lalolagi!"\ntest tests::test_paths ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n')])])]),s("p",[e._v("Great! Now that the tests pass, build the service for deployment by runing "),s("code",[e._v("oasis build")]),e._v(".\nWe'll do the deploy in the next step.")]),e._v(" "),s("h2",{attrs:{id:"integration-test-using-the-local-chain"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#integration-test-using-the-local-chain","aria-hidden":"true"}},[e._v("#")]),e._v(" Integration Test Using the Local Chain")]),e._v(" "),s("p",[e._v("In this step we will use the Javascript based test in the test directory.\nThis script uses "),s("a",{attrs:{href:"https://github.com/oasislabs/oasis.js",target:"_blank",rel:"noopener noreferrer"}},[e._v("oasis.js"),s("OutboundLink")],1),e._v(" to interact with the local chain or Devnet 2.0.")]),e._v(" "),s("ol",[s("li",[s("code",[e._v("cd ../app")])]),e._v(" "),s("li",[e._v("Install app dependencies using "),s("code",[e._v("npm install")]),e._v(" (or "),s("code",[e._v("yarn install")]),e._v(" if that's more your style)")]),e._v(" "),s("li",[e._v("In a separate terminal, run the local chain using "),s("code",[e._v("oasis-chain")])])]),e._v(" "),s("p",[e._v("You can now test on the local chain using "),s("code",[e._v("oasis deploy --profile local")]),e._v(". You will see the following output,")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" PASS  test/service.spec.ts (5.965s)\n  HelloWorld Test\n    ✓ deployed (2ms)\n    ✓ known greeting (409ms)\n    ✓ insert new greeting in Samoan (400ms)\n\nTest Suites: 1 passed, 1 total\nTests:       3 passed, 3 total\n")])])]),s("h2",{attrs:{id:"where-to-go-from-here"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#where-to-go-from-here","aria-hidden":"true"}},[e._v("#")]),e._v(" Where to go from here?")]),e._v(" "),s("ul",[s("li",[e._v("Check out the "),s("a",{attrs:{href:"/tutorials"}},[e._v("tutorials")]),e._v("!")]),e._v(" "),s("li",[s("a",{attrs:{href:"https://doc.rust-lang.org/book/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Learn Rust!"),s("OutboundLink")],1),e._v(" (protip: if you use DuckDuckGo, you can search the Rust docs with "),s("code",[e._v("!rust <query>")]),e._v(")")]),e._v(" "),s("li",[e._v("Browse "),s("a",{attrs:{href:"https://crates.io",target:"_blank",rel:"noopener noreferrer"}},[e._v("crates.io"),s("OutboundLink")],1),e._v(" for libraries to use in your services")])])])},[],!1,null,null,null);t.default=i.exports}}]);